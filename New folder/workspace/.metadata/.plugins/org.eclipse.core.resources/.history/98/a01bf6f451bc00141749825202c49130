package algorithm1;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;


public class BTree {

	private int order = 5;
	private int totalNodes;
	private int totalKeys;
	private int depth;
	private TreeNode root;
	
	public BTree(String FileName){


	root = null;
    
	File inputData = new File(FileName);
    Scanner in;
	try{
		in = new Scanner(inputData);
		
		while (in.hasNext())
		{
			
			String  line = in.nextLine();
			String [] word = line.split("\t");
			int key = Integer.parseInt(word[0]);
			insert(key);
										
		}
		in.close();	
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
	}
	
	public void insert(int key){
	if (root == null)
	{
		TreeNode newNode = new TreeNode(key);
	}
	
	else 
	{
	TreeNode current = root;
	int [] currentArray;
	boolean inserted = false;
	while (current != null && inserted == false)
	{
	currentArray = current.getKeysInNode();
	if (currentArray.length == 3)
	{
		
	}
	
	else
	{
		current.addKey(key);
		//Insert into the array and shift it.
		
	}
	
	}
//	if (current.getIndex() == 3)
//		{
//		currentArray = current.getKeysInNode();
//		inserted = checkToPop(currentArray, key);
//		}
//		else{
//		current.addKey(key);
//		inserted = true;
//		}
	
	//If 
	//TEST CASES WHERE YOU NEED TO CREATE A NEW NODE
	//ORDER IS 5

	}
		
	}
	
	public boolean checkFitInArray(int[] array, int key){
		boolean inserted = false;
		for (int i = 0; i < order; i++)
		{
			if (key > array[i])
			{
				
			}
		}
		return inserted;
	}
	
	public void find(int key){
		//If key is found
		//System.out.println("Key:"+key+"has been Found");
		
		//else
		//System.out.println("Key is not inside this tree");
	}
	public int getAmountOfNodes() {return totalNodes;}
	public int getAmountOfKeys() {return totalKeys;}
	public int getDepth(){return depth;}
	
	
	
	public int delete (int key){
		return 0;
	}
	
	
	
}
